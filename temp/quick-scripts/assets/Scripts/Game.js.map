{"version":3,"sources":["Game.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","onLoad","groundY","y","height","timer","starDuration","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","console","log","position","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","gainScore","string","start","update","dt","gameOver","stopAllActions","director","loadScene"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY;AACRC,qBAAS,IADD;AAERC,kBAAMP,GAAGQ;AAFD,SAFJ;AAMR;AACAC,yBAAiB,CAPT;AAQRC,yBAAiB,CART;AASR;AACAC,gBAAQ;AACJL,qBAAS,IADL;AAEJC,kBAAMP,GAAGY;AAFL,SAVA;AAcR;AACAC,gBAAQ;AACJP,qBAAS,IADL;AAEJC,kBAAMP,GAAGY;AAFL,SAfA;AAmBR;AACAE,sBAAc;AACVR,qBAAS,IADC;AAEVC,kBAAMP,GAAGe;AAFC;AApBN,KAHP;;AA6BL;;AAEAC,UA/BK,oBA+BK;AACN;AACA,aAAKC,OAAL,GAAe,KAAKN,MAAL,CAAYO,CAAZ,GAAgB,KAAKP,MAAL,CAAYQ,MAAZ,GAAqB,CAApD,CAFM,CAEiD;;AAEvD;AACA,aAAKC,KAAL,GAAa,CAAb;AACA,aAAKC,YAAL,GAAoB,CAApB;;AAEA;AACA,aAAKC,YAAL;AACA;AACA,aAAKC,KAAL,GAAa,CAAb;AACH,KA3CI;;;AA6CLD,kBAAc,wBAAY;AACtB;AACA,YAAIE,UAAUxB,GAAGyB,WAAH,CAAe,KAAKpB,UAApB,CAAd;AACA;AACA,aAAKqB,IAAL,CAAUC,QAAV,CAAmBH,OAAnB;AACA;AACAA,gBAAQI,WAAR,CAAoB,KAAKC,kBAAL,EAApB;AACAC,gBAAQC,GAAR,CAAYP,QAAQQ,QAApB;AACAR,gBAAQS,YAAR,CAAqB,MAArB,EAA6BC,IAA7B,GAAoC,IAApC;;AAEA;AACA,aAAKb,YAAL,GAAoB,KAAKX,eAAL,GAAuByB,KAAKC,MAAL,MAAiB,KAAK3B,eAAL,GAAuB,KAAKC,eAA7C,CAA3C;AACA,aAAKU,KAAL,GAAa,CAAb;AACH,KA1DI;;AA4DLS,wBAAoB,8BAAY;AAC5B,YAAIQ,QAAQ,CAAZ;AACA;AACA,YAAIC,QAAQ,KAAKrB,OAAL,GAAekB,KAAKC,MAAL,KAAgB,KAAKvB,MAAL,CAAYoB,YAAZ,CAAyB,QAAzB,EAAmCM,UAAlE,GAA+E,EAA3F;AACA;AACA,YAAIC,OAAO,KAAKd,IAAL,CAAUe,KAAV,GAAkB,CAA7B;AACAX,gBAAQC,GAAR,CAAY,KAAKL,IAAL,CAAUe,KAAtB;AACAJ,gBAAQ,CAACF,KAAKC,MAAL,KAAgB,GAAjB,IAAwB,CAAxB,GAA4BI,IAApC;AACA;AACA,eAAOxC,GAAG0C,EAAH,CAAML,KAAN,EAAaC,KAAb,CAAP;AACH,KAtEI;;AAwELK,eAAW,qBAAY;AACnB,aAAKpB,KAAL,IAAc,CAAd;AACA;AACA,aAAKT,YAAL,CAAkB8B,MAAlB,GAA2B,YAAY,KAAKrB,KAA5C;AACH,KA5EI;;AA8ELsB,SA9EK,mBA8EI,CAER,CAhFI;;;AAkFLC,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA;AACA,YAAI,KAAK3B,KAAL,GAAa,KAAKC,YAAtB,EAAoC;AAChC,iBAAK2B,QAAL;AACA;AACH;AACD,aAAK5B,KAAL,IAAc2B,EAAd;AACH,KA1FI;AA2FLC,cAAU,oBAAY;AAClB,aAAKnC,MAAL,CAAYoC,cAAZ,GADkB,CACY;AAC9BjD,WAAGkD,QAAH,CAAYC,SAAZ,CAAsB,MAAtB;AACH;AA9FI,CAAT","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\Scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // this property quotes the PreFab resource of stars\r\n        starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        // the random scale of disappearing time for stars\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n        // ground node for confirming the height of the generated star's position\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // player node for obtaining the jump height of the main character and controlling the movement switch of the main character\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // reference of score label\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // obtain the anchor point of ground level on the y axis\r\n        this.groundY = this.ground.y + this.ground.height / 2; // this.ground.top may also work\r\n\r\n        // initialize timer\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n\r\n        // generate a new star\r\n        this.spawnNewStar();\r\n        // initialize scoring\r\n        this.score = 0;\r\n    },\r\n\r\n    spawnNewStar: function () {\r\n        // generate a new node in the scene with a preset template\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        // put the newly added node under the Canvas node\r\n        this.node.addChild(newStar);\r\n        // set up a random position for the star\r\n        newStar.setPosition(this.getNewStarPosition());\r\n        console.log(newStar.position);\r\n        newStar.getComponent('Star').game = this;\r\n\r\n        // reset timer, randomly choose a value according the scale of star duration\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // According to the position of the ground level and the main character's jump height, randomly obtain an anchor point of the star on the y axis\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // according to the width of the screen, randomly obtain an anchor point of star on the x axis\r\n        var maxX = this.node.width / 2;\r\n        console.log(this.node.width);\r\n        randX = (Math.random() - 0.5) * 2 * maxX;\r\n        // return to the anchor point of the star\r\n        return cc.v2(randX, randY);\r\n    },\r\n\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // update the words of the scoreDisplay Label\r\n        this.scoreDisplay.string = 'Score: ' + this.score;\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        // update timer for each frame, when a new star is not generated after exceeding duration\r\n        // invoke the logic of game failure\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.timer += dt;\r\n    },\r\n    gameOver: function () {\r\n        this.player.stopAllActions(); //stop the jumping action of the player node\r\n        cc.director.loadScene('Game');\r\n    }\r\n});\r\n"]}